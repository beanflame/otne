
   /*
    token_type qweqwe(const std::wstring& str) {
        auto it = lexer_operator_list.find(str);
        if (it != lexer_operator_list.end()) {
            return it->second;
        } else {
            return t_null;
        }
    }
    */

    /*
    token Lexer::lexer_is_operate_type(wchar_t ch)
    {
        next();
        std::string str;
        str.push_back(ch);
        for (auto [op_str, op_type] : lexer_operator_list)
        {
            if (op_str == str)
            {
                return token(op_type, str);
            }
        }
        return token();
    }
    */
    
    /*
    int isKeyWord(std::wstring t)
    {
        for (auto [op_str, op_type] : lexer_operator_list)
        {
            if (op_str == t)
            {
                // return token(op_type, t);
                return true;
            }
        }
        return false;
    }
    */


    
    Lexer::Lexer(std::wstring str) 
    {

        while (m_idx < str.length()) {

        
       
            
          
            
           
            else
            {
                std::wstring str_;
                str_.push_back(scan_ch);
                auto it = lexer_operator_list.find(str_);
                if (it != lexer_operator_list.end()) {
                    // return it->second;
                    std::wcout << L"{ " << str_ << L" } " << row << L":" << col << std::endl;
                } else {
                    // return t_null;
                    std::wcerr << L"{ " << scan_ch << L" } " << row << L":" << col << L" " << L" Error: Invalid Character" << std::endl;
                }

                /*
                std::wstring estr_;
                
                for (auto [op_str, op_type] : lexer_operator_list)
                {
                    if(op_str == str_)
                    {
                        estr_ = str_;
                    }
                }
                if (estr_ == str_)
                {
                    std::wcout << L"{ " << str_ << L" } " << row << L":" << col << std::endl;
                }else if (estr_ != str_)
                {
                    std::wcerr << L"{ " << scan_ch << L" } " << row << L":" << col << L" " << L" Error: Invalid Character" << std::endl;
                }
                */
                next();
            }

            
    





            



            /*
            if (isAlpha(ch)) {
                while (isAlpha(ch)) {
                    token += ch;
                    stlPos++;
                    ch = Text[stlPos];
                }
                if (isKeyWord(token)) {
                    wcout << token << " <ID>" << endl;
                    // wcout << token << " <identifier>" << endl;
                    token = L"";
                } else {
                    wcout << token << " <name>" << endl;
                    token = L"";
                }
            }

            else if (ch == L'/') {
                stlPos++;
                ch = Text[stlPos];
                if (ch == L'/') {
                    stlPos++;
                    ch = Text[stlPos];
                    while (ch != 0 && ch != L'\n') {
                        token += ch;
                        stlPos++;
                        ch = Text[stlPos];
                    }
                // wcout << token << L" <注释>" << endl;
                    token = L"";
                }
            }


            else if (ch == L'\"') {
                stlPos++;
                ch = Text[stlPos];
                while (ch != 0 && ch != L'\"') {
                    token += ch;
                    stlPos++;
                    ch = Text[stlPos];
                }
                wcout << token << L" <string>" << endl;
                token = L"";
                stlPos++;
            }


            else if (isDigit(ch)) {
                while (isDigit(ch) || (ch == L'.')) {
                    token += ch;
                    stlPos++;
                    ch = Text[stlPos];
                }
                wcout << token << L" <int>" << endl;
                token = L"";
            }

            else if (ch == L'\'') {
                stlPos++;
                ch = Text[stlPos];
                while (ch != 0 && ch != L'\'') {
                    token += ch;
                    stlPos++;
                    ch = Text[stlPos];
                }
                wcout << token << L" <char>" << endl;
                token = L"";
                stlPos++;
            }

            */




        // else {
        //     // wcout << ch;
        //     m_idx++;
        //     col++;
        // }
            
            // wcout << "\""<< ch << "\"" << L" m_idx: " << m_idx << endl;
        }
    }















































/*
ch = Text[stlPos];

if (isText(ch)) {
    while (isText(ch)) {
        token += ch;
        stlPos++;
        ch = Text[stlPos];
    }
    if (isKeyWord(token)) {
        wcout << token;
        token = L"";
    }
    else {
        wcout << token;
        token = L"";
    }
}
else {
    wcout << ch;
    stlPos++;
}
*/




/*
else if (isNum(ch)) {
    while (isNum(ch) || (ch == L'.')) {
        token += ch;
        stlPos++;
        ch = Text[stlPos];
    }
    wcout << token;
    token = L"";
}

else if (ch == L'(') {

    token += ch;
    stlPos++;
    ch = Text[stlPos];

    wcout << token;

    token = L"";
}
else if (ch == L')') {

    token += ch;
    stlPos++;
    ch = Text[stlPos];

    wcout << token;
    token = L"";
}

else if (ch == L'{') {

    token += ch;
    stlPos++;
    ch = Text[stlPos];

    wcout << token;
    token = L"";
}
else if (ch == L'}') {

    token += ch;
    stlPos++;
    ch = Text[stlPos];
    wcout << token;
    token = L"";
}



else if (ch == L'\"') {
    bool s = 1;
    token += ch;
    while (s)
    {
        stlPos++;
        ch = Text[stlPos];
        token += ch;
        if (ch == L'\"') { s = 0; }
    }
    wcout << token;
    token = L"";
    stlPos++;
}
*/















/*
if (isZHchar(ch)) {
    token += ch;
    while (isZHchar(ch)) {
        ch = Text[stlPos++];
        //stlPos++;
        token += ch;
    }
    if (isKey(token)) {
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 10);
        wcout << token;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
        token = L"";
    }
}
else if (ch == L'\"') {
    bool ol = 1;
    token += ch;
    while(ol)
    {
        ch = Text[stlPos++];
        token += ch;
        if (ch == L'\"') { ol = 0; }
    }
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 12);
    wcout << token;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
    token = L"";
}
else {
    wcout << ch;
    ch = Text[stlPos++];
}
*/



 
